plugins {
    id 'application'
    id "com.diffplug.spotless" version "6.3.0"
}

repositories {
    mavenCentral()
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}


configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'minutes'
}

dependencies {
    implementation 'io.hstream:hstreamdb-java:0.10.0-SNAPSHOT'
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.17.1'

    implementation 'info.picocli:picocli:4.6.3'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'

    implementation group: 'io.grpc', name: 'grpc-api', version: '1.45.1'
}

compileJava {
    options.compilerArgs += [
        "-Aproject=${project.group}/${project.name}"
    ]
}

application {
    mainClass = 'io.hstream.tools.WriteBench'
    //    mainClass = 'io.hstream.tools.ReadBench'
    //    mainClass = 'io.hstream.tools.WriteReadBench'
    //    mainClass = project.findProperty("chooseMain").toString()
}

apply plugin: 'java'
task(readBench, dependsOn: 'classes', type: JavaExec) {
    main = 'io.hstream.tools.ReadBench'
    classpath = sourceSets.main.runtimeClasspath
}

task(writeBench, dependsOn: 'classes', type: JavaExec) {
    main = 'io.hstream.tools.WriteBench'
    classpath = sourceSets.main.runtimeClasspath
}

task(readWriteBench, dependsOn: 'classes', type: JavaExec) {
    main = 'io.hstream.tools.WriteReadBench'
    classpath = sourceSets.main.runtimeClasspath
}

task(writeQPSBench, dependsOn: 'classes', type: JavaExec) {
    main = 'io.hstream.tools.WriteQpsBench'
    classpath = sourceSets.main.runtimeClasspath
}

task writeBenchTask(type: CreateStartScripts) {
    mainClassName = 'io.hstream.tools.WriteBench'
    applicationName = 'writeBench'
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

task readBenchTask(type: CreateStartScripts) {
    mainClassName = 'io.hstream.tools.ReadBench'
    applicationName = 'readBench'
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

task end2endBenchTask(type: CreateStartScripts) {
    mainClassName = 'io.hstream.tools.WriteReadBench'
    applicationName = 'writeReadBench'
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

task writeQpsBenchTask(type: CreateStartScripts) {
    mainClassName = 'io.hstream.tools.WriteQpsBench'
    applicationName = 'writeQpsBench'
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

applicationDistribution.into("bin") {
    duplicatesStrategy= DuplicatesStrategy.EXCLUDE
    from(writeBenchTask)
    from(readBenchTask)
    from(end2endBenchTask)
    fileMode = 0755
}

spotless {
    java {
        googleJavaFormat()
    }

    groovyGradle {
        target '*.gradle'
        greclipse()
        indentWithSpaces()
    }
}
